<erl module=jsonrpc_mod>
-compile(export_all).

out(A) ->
       Peer = if
		tuple(A#arg.clisock),
	    	element(1, A#arg.clisock) == sslsocket ->
			   ssl:peername(A#arg.clisock);
                true ->
                           inet:peername(A#arg.clisock)
              end,

       {ok, {IP, _}} = Peer,
       A2 = A#arg{state = [{ip, IP}]},
       yaws_rpc:handler_session(A2, {?MODULE, handler}).

handler([{ip, IP}] = _State, {call, nop, [Value]} = _Request, Session) ->
       {true, 0, Session, {response, "ok"}};

handler([{ip, IP}] = _State, {call, test_and_set, [Key, OldValue, NewValue]} = _Request, Session) ->
       %io:format("Request = test_and_set(~p)~n", [_Request]),
       case cs_api:test_and_set(Key, OldValue, NewValue) of
         ok ->
           {true, 0, Session, {response, "ok"}};
	 {fail, {key_changed, Value}} ->
           {true, 0, Session, {response, {struct, [{failure, "key_changed"}, 
                  {value, lists:flatten(io_lib:format("~s", [Value]))}]}}};
	 Res ->
           io:format("~p~n", [Res]),
           {true, 0, Session, {response, lists:flatten(io_lib:write(Res))}}
       end;

handler([{ip, IP}] = _State, {call, read, [Key]} = _Request, Session) ->
       %io:format("Request = read(~p)~n", [_Request]),
       case cs_api:read(Key) of 
         {fail, Reason} ->
           {true, 0, Session, {response, {struct, [{failure, atom_to_list(Reason)}]}}};
         Value ->	 
           {true, 0, Session, {response, Value}}
       end;

handler([{ip, IP}] = _State, {call, write, [Key, Value]} = _Request, Session) ->
       %io:format("Request = write(~p)~n", [_Request]),
       case cs_api:write(Key, Value) of
         ok ->
           {true, 0, Session, {response, "ok"}};
	 {fail, Reason} ->
           {true, 0, Session, {response, {struct, [{failure, atom_to_list(Reason)}]}}}
       end;

handler([{ip, IP}] = _State, Any, Session) ->
       io:format("Unknown request = ~p~n", [Any]),
       {true, 0, Session, {response, {struct, [{failure, "unknownreq"}]}}}.
</erl>
