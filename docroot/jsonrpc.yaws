<erl module=jsonrpc_mod>
-compile(export_all).

out(A) ->
    Peer = if
               tuple(A#arg.clisock),
               element(1, A#arg.clisock) == sslsocket ->
                   ssl:peername(A#arg.clisock);
               true ->
                   inet:peername(A#arg.clisock)
           end,
    {ok, {IP, _}} = Peer,
    A2 = A#arg{state = [{ip, IP}]},
    yaws_rpc:handler_session(A2, {?MODULE, handler}).

handler([{ip, _IP}] = _State, {call, Operation, Params}, Session) ->
    {true, 0, Session, {response, handler(Operation, Params)}}.

handler(nop, [Value]) ->
    "ok";

handler(range_read, [From, To]) ->
    {ErrorCode, Data} = cs_api:range_read(From, To),
    {struct, [{success, atom_to_list(ErrorCode)}, {data, data_to_json(Data)}]};

handler(test_and_set, [Key, OldValue, NewValue]) ->
    %io:format("Request = test_and_set(~p)~n", [_Request]),
    case cs_api:test_and_set(Key, OldValue, NewValue) of
        ok -> "ok";
        {fail, {key_changed, Value}} ->
            {struct, [{failure, "key_changed"},
                      {value, lists:flatten(io_lib:format("~s", [Value]))}]};
        {fail, abort} ->
            {struct, [{failure, "abort"}]};
        Res ->
            io:format("test_and_set: ~p~n", [Res]),
            lists:flatten(io_lib:write(Res))
    end;

handler(read, [Key]) ->
       %io:format("Request = read(~p)~n", [_Request]),
    case cs_api:read(Key) of
        {fail, Reason} ->
            {struct, [{failure, atom_to_list(Reason)}]};
        Value ->
            Value
    end;

handler(write, [Key, Value]) ->
    %io:format("Request = write(~p)~n", [_Request]),
    case cs_api:write(Key, Value) of
        ok -> "ok";
        {fail, Reason} ->
            {struct, [{failure, atom_to_list(Reason)}]}
    end;

handler(delete, [Key]) ->
    %io:format("Request = delete(~p)~n", [_Request]),
    case cs_api:delete(Key) of
        {fail, Reason} ->
            {struct, [{failure, atom_to_list(Reason)}]};
        {ok,NumOk,StateList} ->
            {struct, [{ok, NumOk},
                      {results,
                       {array, [ atom_to_list(X) || X <- StateList]}
                      }
                     ]
            }
    end;

handler(req_list, [Param]) ->
    handler(req_list, [translog_to_json(txlog:new()), Param]);

handler(req_list, [TransLog, {array, ReqList}]) ->
    % convert req-list to clean reqlist without json artefacts
    CleanReqList = [ case Elem of
                         {read, Key} ->
                             {read, Key};
                         {write, {struct, [{Key, Val}]}} ->
                             {write, atom_to_list(Key), Val};
                         {commit, Commit} ->
                             {commit};
                         Any -> Any
                     end || {struct, [Elem]} <- ReqList ],
    ErlResult = cs_api:process_request_list(json_to_translog(TransLog), CleanReqList),
    make_result_json_conforming(ErlResult);

handler(publish, [Topic, Content]) ->
    case pubsub_api:publish(Topic, Content) of
        ok -> "ok"
    end;

handler(subscribe, [Topic, URL]) ->
    case pubsub_api:subscribe(Topic, URL) of
        ok -> "ok";
        {fail, Reason} ->
            {struct, [{failure, atom_to_list(Reason)}]}
    end;

handler(unsubscribe, [Topic, URL]) ->
    case pubsub_api:unsubscribe(Topic, URL) of
        ok -> "ok";
        {fail, Reason} ->
            {struct, [{failure, atom_to_list(Reason)}]}
    end;

handler(get_subscribers, [Topic]) ->
    case pubsub_api:get_subscribers(Topic) of
        [] -> {array, []};
        Any -> {array, Any}
    end;

handler(notify, [Topic, Value]) ->
    io:format("Got pubsub notify ~p -> ~p~n", [Topic, Value]),
    "ok";

handler(AnyOp, AnyParams) ->
    io:format("Unknown request = ~p(~p)~n", [AnyOp, AnyParams]),
    {struct, [{failure, "unknownreq"}]}.

make_result_json_conforming(ErlResult) ->
    case ErlResult of
        {{translog, TLog}, {results, Results}} ->
            {struct, [{translog, translog_to_json(TLog)}, {results, results_to_json(Results)}]};
        Any ->
            ok
    end.

translog_to_json(TLog) ->
    base64:encode_to_string(term_to_binary(TLog, [compressed])).

json_to_translog(JsonTLog) ->
    binary_to_term(base64:decode(JsonTLog)).

results_to_json(Results) ->
    Entries = [ {struct, [{op, atom_to_list(Op)},
                          case Op of
                              commit -> {key, atom_to_list(Key)};
                              Any -> {key, Key}
                          end,
                          case Val of
                              {fail, Reason} -> {fail, atom_to_list(Reason)};
                              {value, Value} -> {value, Value}
                          end ]}
                || {Op, Key, Val} <- Results ],
    {array, Entries}.

data_to_json(Data) ->
    {array, [ {struct, [{key, Key},
                        {value, Value},
                        {version, Version}]} ||
		{Key, Value, Version, WriteLock, ReadLock} <- Data]}.
</erl>
