<erl module=jsonrpc_mod>
-compile(export_all).

out(A) ->
    Peer = if
               tuple(A#arg.clisock),
               element(1, A#arg.clisock) =:= sslsocket ->
                   ssl:peername(A#arg.clisock);
               true ->
                   inet:peername(A#arg.clisock)
           end,
    {ok, {IP, _}} = Peer,
    A2 = A#arg{state = [{ip, IP}]},
    yaws_rpc:handler_session(A2, {?MODULE, handler}).

handler([{ip, _IP}] = _State, {call, Operation, Params}, Session) ->
    {true, 0, Session, {response, handler(Operation, Params)}}.

handler(nop, [Value]) ->
    "ok";

handler(range_read, [From, To]) ->
    {ErrorCode, Data} = api_dht_raw:range_read(From, To),
    {struct, [{success, atom_to_list(ErrorCode)}, {data, data_to_json(Data)}]};

handler(test_and_set, [Key, OldValue, NewValue]) ->
    %io:format("Request = test_and_set(~p)~n", [_Request]),
    api_json:tx_test_and_set(Key, OldValue, NewValue);

handler(read, [Key]) ->
    api_json:tx_read(Key);

handler(write, [Key, Value]) ->
    api_json:tx_write(Key, Value);

handler(delete, [Key]) ->
    %io:format("Request = delete(~p)~n", [_Request]),
    case api_rdht:delete(Key) of
        {fail, Reason} ->
            {struct, [{failure, atom_to_list(Reason)}]};
        {ok, NumOk, StateList} ->
            {struct, [{ok, NumOk},
                      {results,
                       {array, [ atom_to_list(X) || X <- StateList ]}
                      }
                     ]
            }
    end;

handler(req_list, [Param]) ->
    api_json:tx_req_list(Param);

handler(req_list, [TLog, ReqList]) ->
    api_json:tx_req_list(TLog, ReqList);

handler(publish, [Topic, Content]) ->
    case api_pubsub:publish(Topic, Content) of
        {ok} -> "ok"
    end;

handler(subscribe, [Topic, URL]) ->
    case api_pubsub:subscribe(Topic, URL) of
        {ok} -> "ok";
        {fail, Reason} ->
            {struct, [{failure, atom_to_list(Reason)}]}
    end;

handler(unsubscribe, [Topic, URL]) ->
    case api_pubsub:unsubscribe(Topic, URL) of
        {ok} -> "ok";
        {fail, Reason} ->
            {struct, [{failure, atom_to_list(Reason)}]}
    end;

handler(get_subscribers, [Topic]) ->
    case api_pubsub:get_subscribers(Topic) of
        [] -> {array, []};
        Any -> {array, Any}
    end;

handler(notify, [Topic, Value]) ->
    io:format("Got pubsub notify ~p -> ~p~n", [Topic, Value]),
    "ok";

handler(AnyOp, AnyParams) ->
    io:format("Unknown request = ~p(~p)~n", [AnyOp, AnyParams]),
    {struct, [{failure, "unknownreq"}]}.

data_to_json(Data) ->
    {array, [ {struct, [{key, Key},
                        {value, Value},
                        {version, Version}]} ||
               {Key, Value, Version, WriteLock, ReadLock} <- Data]}.
</erl>
