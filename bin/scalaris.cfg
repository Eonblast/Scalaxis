% @copyright 2007-2011 Zuse Institute Berlin

%    Licensed under the Apache License, Version 2.0 (the "License");
%    you may not use this file except in compliance with the License.
%    You may obtain a copy of the License at
%
%        http://www.apache.org/licenses/LICENSE-2.0
%
%    Unless required by applicable law or agreed to in writing, software
%    distributed under the License is distributed on an "AS IS" BASIS,
%    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%    See the License for the specific language governing permissions and
%    limitations under the License.

% $Id$

%% @doc how many scalaris nodes per vm
{nodes_per_vm,1}.

{dht_node_sup, sup_dht_node}.
{dht_node, dht_node}.

%% DeadNode Cache Parameters
%% @doc zombieDetectorInterval
{zombieDetectorInterval,30000}.
%% @doc how many dead nodes have to be observed
{zombieDetectorSize,10}.

%% log4erl log parameters (before log4erl is started, error_logger with
%% parameters from preconfig will be used)
{log_path, "../log"}.
%% @doc Loglevel: debug < info < warn < error < fatal < none
{log_level, warn}.
{log_level_file, warn}.
%% @doc Specify name without extension (".txt" will be used).
%%      The two different logger's file names must be unique!
{log_file_name_errorlogger, "scalaris_error_logger"}.
{log_file_name_log4erl, "scalaris_log4erl"}.
{log_file_size, 1048576}. % 1024*1024
{log_file_rotations, 4}. % results in to up to 5 files

%% @doc LogFormat, see Readme for log4erl
{log_format,"[%L] %l%n"}.
{log_format_file,"%j %T [%L] %l%n"}.


%% @doc the initial number of milliseconds between two failure
%% detector checks
{failure_detector_interval, 3000}.

{load_balance_interval, 10000}.
{load_balance_startup_interval, 10000}.
{load_balance_flag_reset_interval, 60000}.

{debug_queue_length, 10}.

{reregister_interval, 600000}.

%% @doc the replication degree of the system
{replication_factor, 4}.

%% @doc the number of nodes needed for a quorum
{quorum_factor, 3}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Overlay maintenance
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @doc the interval between two stabilization runs
{stabilization_interval_base, 10000}.

%% @doc the interval between two stabilization runs if T-Man detected a change (only use by rm-tman)
{stabilization_interval_min, 887}.

%% @doc the interval between two stabilization runs
{stabilization_interval_max, 60000}.

%% @doc the length of the successor list
{succ_list_length, 9}.

%% @doc the length of the predecessor list
{pred_list_length, 9}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% routing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @doc the interval between two finger/pointer stabilization runs
{pointer_base_stabilization_interval, 30000}.
{pointer_min_stabilization_interval, 1000}.
{pointer_max_stabilization_interval, 1800000}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% replication
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% key_creation algorithm
{key_creator, random}.

%{key_creator, random_with_bit_mask}.
% (randomkey band mask2) bor mask1
%{key_creator_bitmask, {16#00000000000000000000000000000000, 16#3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF}}.
%{key_creator_bitmask, {16#40000000000000000000000000000000, 16#3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF}}.
%{key_creator_bitmask, {16#80000000000000000000000000000000, 16#3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF}}.
%{key_creator_bitmask, {16#C0000000000000000000000000000000, 16#3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF}}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% cyclon
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{cyclon_shuffle_length, 8}.
{cyclon_cache_size, 20}.
{cyclon_interval, 4900}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% chord
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{chord_base, 64}.
%% @doc Look-up nodes in the neighborhood object of the ring maintenance
%%      if the routing table size is less than this value.
%%      Set to 0 to disable neighborhood look-up.
{rt_size_use_neighbors, 10}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Vivaldi
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

{vivaldi_interval, 10000}.
{vivaldi_dimensions, 2}.
{vivaldi_count_measurements, 10}.
{vivaldi_measurements_delay, 1000}.
{vivaldi_latency_timeout, 60000}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Gossip
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{gossip_interval, 1000}.
{gossip_min_triggers_per_round, 10}.
{gossip_max_triggers_per_round, 1000}.
{gossip_converge_avg_epsilon, 5.0}.
{gossip_converge_avg_count, 10}.
{gossip_converge_avg_count_start_new_round, 20}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Ganglia
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ganglia_enable, false}.
{ganglia_interval, 30000}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DC clustering
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{dc_clustering_enable, false}.
{dc_clustering_interval, 20000}.
{dc_clustering_reset_interval, 60000}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% toke (tokyocabinet)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{db_directory, "../data"}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% trigger
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ringmaintenance_trigger, trigger_dynamic}.
{routingtable_trigger, trigger_periodic}.
{cyclon_trigger, trigger_periodic}.
{vivaldi_trigger, trigger_periodic}.
{dn_cache_trigger, trigger_periodic}.
{dht_node_reregister_trigger, trigger_periodic}.
{gossip_trigger, trigger_periodic}.
{dc_clustering_reset_trigger, trigger_periodic}.
{dc_clustering_cluster_trigger, trigger_periodic}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% transactions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{range_read_timeout, 5000}.
{tx_rtm_update_interval, 5000}.
{tx_timeout, 5000}.
{transaction_lookup_timeout, 3000}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% paxos
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{learner_noinit_timeout, 5500}.
{acceptor_noinit_timeout, 5500}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% node move
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{move_use_incremental_slides, true}. % keep in sync among all nodes
{move_symmetric_incremental_slides, true}. % keep in sync among all nodes
{move_max_transport_entries, 100}.
{move_notify_other_timeout, 1000}.
{move_notify_other_retries, 2}.
{move_send_data_timeout, 1000}.
{move_send_data_retries, 5}.
{move_send_delta_timeout, 1000}.
{move_send_delta_retries, 5}.
{move_rcv_data_timeout, 1000}.
{move_rcv_data_retries, 5}.
{move_rcv_delta_timeout, 1000}.
{move_rcv_delta_retries, 5}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% node join
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{join_response_timeout, 1000}.
{join_response_timeouts, 3}.
{join_request_timeout, 1000}.
{join_request_timeouts, 3}.
{join_lookup_timeout, 3000}.
{join_known_hosts_timeout, 1000}.
{join_timeout, 30000}.
{join_get_number_of_samples_timeout, 1000}.
{join_lb_psv, lb_psv_gossip}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% passive load balancing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{lb_psv_simple_samples, 10}.
{lb_psv_split_samples, 10}.
{lb_psv_gossip_min_samples, 10}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% monitoring
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for reported monitoring data, keep this many time slots (the slot length depends on the data)
{monitor_timeslots_to_keep, 360}. % 10s time slot -> keep data for 1 hour
{monitor_perf_interval, 10}. % start micro-benchmark every 10s
{rrd_timing_hist_size, 20}. % for every timing value, create a histogram of size 20

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% network
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% port(s) for incoming communications, try one in this range
% (overwritten in startup scripts)
{port, {14195, 14198}}.

% http web server port for debug interface, JSON interface
% (overwritten in startup scripts) 
{yaws_port, 8000}.

% the maximum size of a post request for the JSON-RPC
% (either a number of bytes, or nolimit)
{yaws_max_post_data, 1048576}. % 1MB

{docroot, "../docroot"}. % http web server docroot

%% the following two parameters should both be smaller than failure_detector_interval
{tcp_send_timeout, 1000}.
{tcp_connect_timeout, 1000}.

% default: listen on all interfaces:
{listen_ip, {0,0,0,0}}.

% default assume local testing
{mgmt_server, {{127,0,0,1},14195,mgmt_server}}.
{known_hosts, [{{127,0,0,1},14195, service_per_vm}, {{127,0,0,1},14196, service_per_vm},
               {{127,0,0,1},14197, service_per_vm}, {{127,0,0,1},14198, service_per_vm}]}.

%% for builtin distributed erlang communication (see scalaris.hrl)
%{mgmt_server, {mgmt_server,'mgmt_server@csr-pc11.zib.de'}}.
%{known_hosts, [{service_per_vm, 'firstnode@csr-pc11.zib.de'}, {service_per_vm, 'node1@csr-pc11.zib.de'}]}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% dht_node processes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{dht_node_sup, sup_dht_node}.
{dht_node, dht_node}.
