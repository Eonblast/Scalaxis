#!/bin/bash
# Copyright 2007-2008 Konrad-Zuse-Zentrum f√ºr Informationstechnik Berlin
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

prefix=@prefix@
exec_prefix=@exec_prefix@
datarootdir=@datarootdir@

# /bin
BINDIR=$DESTDIR@bindir@
# /etc/scalaris/
ETCDIR=$DESTDIR@sysconfdir@/scalaris
# /lib/scalaris/
SCALARISDIR=$DESTDIR@libdir@/scalaris
# /lib/scalaris/ebin
BEAMDIR=$DESTDIR@libdir@/scalaris/ebin
# /lib/scalaris/docroot
DOCROOTDIR=$SCALARISDIR/docroot
# /lib/scalaris/docroot_node
NODEDOCROOTDIR=$SCALARISDIR/docroot_node
# /share/doc/scalaris
DOCDIR=$DESTDIR@docdir@
# /share/java
JAVADIR=$DESTDIR@datarootdir@/java
# /var/log/scalaris
LOGDIR=$DESTDIR@localstatedir@/log/scalaris

SCALARIS_COOKIE="chocolate chip cookie"

TCERLFLAGS=@ERLANG_TCERL_FLAGS@

interactive=0

usage(){
    echo "usage: scalarisctl [options] <cmd>"
    echo "    -h                   help"
    echo "    -i                   interactive"
    echo "    boot start           start boot server"
    echo "    boot stop            stop boot server"
    echo "    boot restart         restart boot server"
    echo "    node start           start normal node"
    echo "    node stop            stop normal node"
    echo "    node restart         restart normal node"
    echo "    debug                connect to boot server"
    echo "    checkinstallation    test installation"
    exit 0
}

fix_paths() {
    ABSPATH="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
    DIRNAME=`dirname $ABSPATH`
    # is this a svn checkout or an rpm installation?
    if [ $DIRNAME != $BINDIR ]; then
        # scalaris
        SCALARISDIR=`dirname $DIRNAME`
        # /etc/scalaris/
        ETCDIR=$SCALARISDIR/bin
        # scalaris/ebin
        BEAMDIR=$SCALARISDIR/ebin
        # scalaris/docroot
        DOCROOTDIR=$SCALARISDIR/docroot
        # scalaris/docroot_node
        NODEDOCROOTDIR=$SCALARISDIR/docroot_node
        # scalaris/log
        LOGDIR=$SCALARISDIR/log
    fi
}

checkinstallation() {
    FQDN_SET=`hostname -f | grep "\.*\." | wc -l`
    if [ "x0" = "x$FQDN_SET" ]; then
        echo "you have to set a fully qualified domain name (FQDN)"
        exit -1
    fi
    erl -noinput -eval 'halt(0).'
    FAILED=$?
    if [ $FAILED -ne 0 ]; then
        echo "ERROR: erl could not be run"
        echo "erl -noinput -eval 'halt(0).'"
        exit 1
    fi
    if [ ! -s `which erl` ]; then
        echo "ERROR: your erl executable is of size zero bytes: `which erl`"
        echo "ls -l `which erl`"
        exit 1
    fi
    erl -noinput -eval 'case catch crypto:start() of ok -> halt(0); _ -> halt(1) end.'
    FAILED=$?
    if [ $FAILED -ne 0 ]; then
        echo "ERROR: erlang could not start the crypto module"
        echo "erl -noinput -eval 'case catch crypto:start() of ok -> halt(0); _ -> halt(1) end.'"
        exit 1
    fi
    if [ -e $ETCDIR/scalaris.cfg ]; then
        erl -noinput -eval "case file:consult(\"$ETCDIR/scalaris.cfg\") of {error, _} -> halt(1); _ -> halt(0) end"
        FAILED=$?
        if [ $FAILED -ne 0 ]; then
            echo "ERROR: there is a syntax error in: $ETCDIR/scalaris.cfg"
            echo "erl -noinput -eval \"A = file:consult(\"$ETCDIR/scalaris.cfg\"), io:format(\"~p~n\", [A]), halt(0) end\""
            exit 1
        fi
    else
        echo "ERROR: there is no config file: $ETCDIR/scalaris.cfg"
    fi
    if [ -e $ETCDIR/scalaris.local.cfg ]; then
        erl -noinput -eval "case file:consult(\"$ETCDIR/scalaris.local.cfg\") of {error, _} -> halt(1); _ -> halt(0) end"
        FAILED=$?
        if [ $FAILED -ne 0 ]; then
            echo "ERROR: there is a syntax error in: $ETCDIR/scalaris.local.cfg"
            echo "erl -noinput -eval \"A = file:consult(\"$ETCDIR/scalaris.local.cfg\"), io:format(\"~p~n\", [A]), halt(0) end\""
            exit 1
        fi
    fi
    erl -noinput -pa $BEAMDIR -eval 'case {code:ensure_loaded(boot), code:ensure_loaded(cs_node)} of {{module,boot},{module,cs_node}} -> halt(0); X -> halt(1) end.'
    FAILED=$?
    if [ $FAILED -ne 0 ]; then
        echo "ERROR: could not find Scalaris' beam files"
        echo "erl -noinput -pa $BEAMDIR -eval 'case {code:ensure_loaded(boot), code:ensure_loaded(cs_node)} of {{module,boot},{module,cs_node}} -> halt(0); X -> halt(1) end.'"
        exit 1
    fi
    exit 0
}

bootstart(){
    if [ $interactive -eq 0 ]; then
        BACKGROUND="-noinput -detached"
    fi
    pushd $BEAMDIR > /dev/null
    erl -setcookie "$SCALARIS_COOKIE" \
        -pa $SCALARISDIR/contrib/yaws/ebin \
        -pa $SCALARISDIR/contrib/log4erl/ebin \
        -pa $BEAMDIR $TCERLFLAGS $BACKGROUND \
        -yaws embedded true \
        -boot_cs log_path "\"$LOGDIR\"" \
        -boot_cs docroot "\"$DOCROOTDIR\"" \
        -boot_cs config "\"$ETCDIR/scalaris.cfg\"" \
        -boot_cs local_config "\"$ETCDIR/scalaris.local.cfg\"" \
        -boot_cs first true \
        -connect_all false -hidden -name boot \
        -s boot $*;
    FAILED=$?
    if [ $FAILED -ne 0 ]; then
        echo "ERROR: could not start scalaris"
        echo "  consider running scalarisctl checkinstallation"
        exit 1
    fi
    popd > /dev/null
}

debug(){
    # look into epmd -list: boot or node
    erl -setcookie "$SCALARIS_COOKIE" -name rem -remsh boot@`hostname -f`
}

bootstop(){
    pushd $BEAMDIR > /dev/null
    erl -setcookie "$SCALARIS_COOKIE" \
        -name ctl \
        -pa $BEAMDIR \
        -noinput \
        -s scalaris_ctl -extra boot@`hostname -f` stop
    popd > /dev/null
}

nodestart(){
    NODE_NAME=${SCALARIS_NODE_NAME:-'node'}
    if [ $interactive -eq 0 ]; then
        BACKGROUND="-noinput -detached"
    fi
    pushd $BEAMDIR > /dev/null
    erl -setcookie "$SCALARIS_COOKIE" \
        -pa $SCALARISDIR/contrib/yaws/ebin \
        -pa $SCALARISDIR/contrib/log4erl/ebin \
        -pa $BEAMDIR $TCERLFLAGS $BACKGROUND \
        -yaws embedded true \
        -chordsharp log_path "\"$LOGDIR\"" \
        -chordsharp docroot "\"$NODEDOCROOTDIR\"" \
        -chordsharp config "\"$ETCDIR/scalaris.cfg\"" \
        -chordsharp local_config "\"$ETCDIR/scalaris.local.cfg\"" \
        -connect_all false -hidden -name $NODE_NAME \
        $SCALARIS_ADDITIONAL_PARAMETERS \
        -s chordsharp $*;
    FAILED=$?
    if [ $FAILED -ne 0 ]; then
        echo "ERROR: could not start scalaris"
        echo "  consider running scalarisctl checkinstallation"
        exit 1
    fi
    popd > /dev/null
}


nodestop(){
    pushd $BEAMDIR > /dev/null
    erl -setcookie "$SCALARIS_COOKIE" \
        -name ctl \
        -pa $BEAMDIR \
        -noinput \
        -s scalaris_ctl -extra node@`hostname -f` stop
    popd > /dev/null
}

fix_paths

while getopts "hi" optionName; do
    case "$optionName" in
        h) usage 0;;
        i) interactive=1;;
        [?]) usage "$badOptionHelp";;
    esac
done

shift $(($OPTIND-1))

case $1 in
    checkinstallation)
        checkinstallation;;
    boot)
        #[ 2 -eq $# ] || usage;
        if [ $2 == "start" ]; then
            shift 2
            bootstart $*;
        elif [ $2 == "stop" ]; then
            bootstop;
        elif [ $2 == "restart" ]; then
            bootstop;
            bootstart;
        fi;;
    debug)
        debug;;
    node)
        #[ 2 -eq $# ] || usage;
        if [ $2 == "start" ]; then
            shift 2
            nodestart $*;
        elif [ $2 == "stop" ]; then
            nodestop;
        elif [ $2 == "restart" ]; then
            nodestop;
            nodestart;
        fi;;
    *) usage;;
esac

