diff --git a/contrib/yaws/src/json.erl b/contrib/yaws/src/json.erl
index 1480498..83d60b3 100644
--- a/contrib/yaws/src/json.erl
+++ b/contrib/yaws/src/json.erl
@@ -59,7 +59,6 @@
 %%% syntactically valid JSON floating-point numbers could silently
 %%% lose precision or noisily cause an overflow.  However, most
 %%% other JSON libraries are likely to behave in the same way.
-%%% The encoding precision defaults to 6 digits.
 %%%
 %%% Strings: If we represented JSON string data as Erlang binaries,
 %%% we would have to choose a particular unicode format.  Instead,
@@ -103,7 +102,7 @@ encode(null) -> "null";
 encode(undefined) -> "null";
 encode(B) when is_binary(B) -> encode_string(B);
 encode(I) when is_integer(I) -> integer_to_list(I);
-encode(F) when is_float(F) -> io_lib:format("~g", [F]);
+encode(F) when is_float(F) -> erlang:float_to_list(F);
 encode(L) when is_list(L) ->
     case is_string(L) of
 	yes -> encode_string(L);
@@ -288,7 +288,7 @@ scan_number([D | Ds], A, X) when A > 0, D >= $0, D =< $9 ->
     % Note that nonzero numbers can't start with "0".
     scan_number(Ds, 10 * A + (D - $0), X);
 scan_number([D | Ds], A, X) when D == $E; D == $e ->
-    scan_exponent_begin(Ds, float(A), X);
+    scan_exponent_begin(Ds, integer_to_list(A) ++ ".0", X);
 scan_number([D | _] = Ds, A, _X) when D < $0; D > $9 ->
     {done, {ok, A}, Ds}.
 
@@ -296,15 +296,15 @@ scan_fraction(Ds, I, X) -> scan_fraction(Ds, [], I, X).
 
 scan_fraction([], _Fs, _I, X) -> {more, X};
 scan_fraction(eof, Fs, I, _X) ->
-    R = I + list_to_float("0." ++ lists:reverse(Fs)),
+    R = list_to_float(integer_to_list(I) ++ "." ++ lists:reverse(Fs)),
     {done, {ok, R}, eof};
 scan_fraction([D | Ds], Fs, I, X) when D >= $0, D =< $9 ->
     scan_fraction(Ds, [D | Fs], I, X);
 scan_fraction([D | Ds], Fs, I, X) when D == $E; D == $e ->
-    R = I + list_to_float("0." ++ lists:reverse(Fs)),
+    R = integer_to_list(I) ++ "." ++ lists:reverse(Fs),
     scan_exponent_begin(Ds, R, X);
 scan_fraction(Rest, Fs, I, _X) ->
-    R = I + list_to_float("0." ++ lists:reverse(Fs)),
+    R = list_to_float(integer_to_list(I) ++ "." ++ lists:reverse(Fs)),
     {done, {ok, R}, Rest}.
 
 scan_exponent_begin(Ds, R, X) ->
@@ -319,12 +319,12 @@ scan_exponent_begin([D | Ds], Es, R, X) when D == $-;
 
 scan_exponent([], _Es, _R, X) -> {more, X};
 scan_exponent(eof, Es, R, _X) ->
-    X = R * math:pow(10, list_to_integer(lists:reverse(Es))),
+    X = list_to_float(R ++ "e" ++ lists:reverse(Es)),
     {done, {ok, X}, eof};
 scan_exponent([D | Ds], Es, R, X) when D >= $0, D =< $9 ->
     scan_exponent(Ds, [D | Es], R, X);
 scan_exponent(Rest, Es, R, _X) ->
-    X = R * math:pow(10, list_to_integer(lists:reverse(Es))),
+    X = list_to_float(R ++ "e" ++ lists:reverse(Es)),
     {done, {ok, X}, Rest}.
 
 scan_comment([]) -> {more, "/"};
