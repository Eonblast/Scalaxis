<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <title>Scalaris Management Interface(Logger)</title>
    <link rel="stylesheet" type="text/css" href="main.css">
  <!--[if lte IE 5.5999]>
    <style type="text/css">@import url(ie55-.css);</style>
  <![endif]-->
  </head>
  <body>

<erl>
make_table([], _Map, Start, TotalBytes, TotalCount) ->
    [{tr, [{bgcolor, '#CCDCEE'}, {width, "100%"}], 
       [
         {td, [], {p, [], "Total"}}, 
         {td, [], {p, [], io_lib:format("~p", [TotalBytes])}}, 
         {td, [], {p, [], io_lib:format("~p", [TotalCount])}}, 
         {td, [], {p, [], io_lib:format("~p", [TotalBytes / timer:now_diff(erlang:now(), Start) * 1000000.0])}}, 
         {td, [], {p, [], io_lib:format("~p", [TotalCount / timer:now_diff(erlang:now(), Start) * 1000000.0])}},
         {td, [], {p, [], "100.0"}}, 
         {td, [], {p, [], "100.0"}}
       ] }
];
make_table([{Tag, _} | Rest], Map, Start, TotalBytes, TotalCount) ->
    {Size, Count} = gb_trees:get(Tag, Map),
    [{tr, [{bgcolor, '#CCDCEE'}, {width, "100%"}], 
       [
         {td, [], {p, [], io_lib:format("~p", [Tag])}}, 
         {td, [], {p, [], io_lib:format("~p", [Size])}}, 
         {td, [], {p, [], io_lib:format("~p", [Count])}}, 
         {td, [], {p, [], io_lib:format("~p", [Size / timer:now_diff(erlang:now(), Start) * 1000000.0])}}, 
         {td, [], {p, [], io_lib:format("~p", [Count / timer:now_diff(erlang:now(), Start) * 1000000.0])}},
         {td, [], {p, [], io_lib:format("~p", [Size / TotalBytes * 100.0])}}, 
         {td, [], {p, [], io_lib:format("~p", [Count / TotalCount * 100.0])}}
       ] }
       | make_table(Rest, Map, Start, TotalBytes, TotalCount)].

get_totals(none, TotalBytes, TotalCount) ->
    {TotalBytes, TotalCount};
get_totals({_Tag, {Size, Count}, Iterator}, TotalBytes, TotalCount) ->
    get_totals(gb_trees:next(Iterator), Size + TotalBytes, Count + TotalCount).

get_tags(none) ->
    [];
get_tags({Tag, {Size, _Count}, Iterator}) ->
    [{Tag, Size} | get_tags(gb_trees:next(Iterator))].

out(Arg) ->
    {Map, Start} = comm_layer.comm_logger:dump(),
    SortedTagList = lists:reverse(lists:keysort(2, get_tags(gb_trees:next(gb_trees:iterator(Map))))),
    {TotalBytes, TotalCount} = get_totals(gb_trees:next(gb_trees:iterator(Map)), 0, 0),
    TableHead = {tr, [{bgcolor, '#000099'}], 
     [
       {td, [{align, "center"}], {strong, [], {font, [{color, "white"}], "Message Tag"}}},
       {td, [{align, "center"}], {strong, [], {font, [{color, "white"}], "Total Size"}}},
       {td, [{align, "center"}], {strong, [], {font, [{color, "white"}], "Total Count"}}},
       {td, [{align, "center"}], {strong, [], {font, [{color, "white"}], "Average Byte/s"}}},
       {td, [{align, "center"}], {strong, [], {font, [{color, "white"}], "Average 1/s"}}},
       {td, [{align, "center"}], {strong, [], {font, [{color, "white"}], "Percent of Bytes"}}},
       {td, [{align, "center"}], {strong, [], {font, [{color, "white"}], "Percent of Count"}}}
     ]},
    {ehtml, {table, [], [TableHead | make_table(SortedTagList, Map, Start, TotalBytes, TotalCount)]}}.
</erl>

</body>
</html>
