ERLC = @ERLC@
ERL = @ERL@
DIALYZER = @ERLANG_ROOT_DIR@/bin/dialyzer
SVN = svn
CD = cd
MAKE = make --quiet
TOUCH = touch

.SUFFIXES: .erl .beam

# ERLC_FLAGS = #+'{parse_transform, smart_exceptions}'

YAWS_PATH= ../contrib/yaws

SOURCES = $(wildcard *.erl)
BEAMS = $(SOURCES:.erl=.beam)

APP_NAME = chordsharp

VSN = $Id$
QUIET=@

all: dir-pubsub dir-comm_layer dir-transstore compile-beam

dir-comm_layer:
	$(QUIET)$(MAKE) -C comm_layer

dir-pubsub:
	$(QUIET)$(MAKE) -C pubsub

dir-transstore:
	$(QUIET)$(MAKE) -C transstore

compile-beam: $(BEAMS)

rt_chord.beam: routingtable.beam
rt_simple.beam: routingtable.beam

cs_db_otp.beam: database.beam

cs_join.beam: chordsharp.hrl
cs_lb.beam: chordsharp.hrl
cs_lookup.beam: chordsharp.hrl
cs_node.beam: chordsharp.hrl
cs_state.beam: chordsharp.hrl
cs_symm_replication.beam: chordsharp.hrl
lookup.beam: chordsharp.hrl
pt.beam: chordsharp.hrl
pt_lookup.beam: chordsharp.hrl
randoms.beam: chordsharp.hrl

routingtable.beam: routingtable.erl
	$(QUIET)echo "compiling ..." $<
	$(QUIET)$(ERLC) -I$(YAWS_PATH)/include -pa $(YAWS_PATH) -o ../bin -W $(ERLC_FLAGS) $<
	$(QUIET)$(ERLC) -I$(YAWS_PATH)/include -pa $(YAWS_PATH) -W $(ERLC_FLAGS) $<

database.beam: database.erl
	$(QUIET)echo "compiling ..." $<
	$(QUIET)$(ERLC) -I$(YAWS_PATH)/include -pa $(YAWS_PATH) -o ../bin -W $(ERLC_FLAGS) $<
	$(QUIET)$(ERLC) -I$(YAWS_PATH)/include -pa $(YAWS_PATH) -W $(ERLC_FLAGS) $<

.erl.beam: 
	$(QUIET)echo "compiling ..." $<
	$(QUIET)$(ERLC) -I$(YAWS_PATH)/include -pa $(YAWS_PATH) -o ../bin -W $(ERLC_FLAGS) $< && $(TOUCH) $@

